syntax = "proto3";

package ncbi.cloudblast.v1alpha;

import "ncbi/cloudblast/v1alpha/blast_request.proto";
import "google/protobuf/empty.proto";

option java_package = "gov.nih.nlm.ncbi.cloudblast.v1alpha";
option java_multiple_files = false;
option java_outer_classname = "APIProto";
option optimize_for = SPEED;
option cc_enable_arenas = true;


service CloudBlast {
  // RPC methods for CloudBlast public API

  // Submit a BLAST search request
  rpc SubmitSearch(SubmitRequest) returns (SubmitReply);

  // Get BLAST search status
  rpc GetStatus(StatusRequest) returns (StatusReply);

  // Get BLAST search result
  rpc Results(ResultRequest) returns (ResultReply);

  // Get the full list of available BLAST databases
  rpc GetDBCatalog(google.protobuf.Empty) returns (DBCatalog);
}

message SubmitRequest {

  // BLAST search request
  BlastRequest req = 1;
}

message SubmitReply {

  // An ID (generated by Java's UUID class) to identify the BLAST search job
  string job_id = 1;
}

message StatusRequest {
  // Request for the status of submitted BLAST search job(s)

  repeated string job_id = 1;
}

message StatusReply {
  // Status for each job from the status request

  enum Status {
    RUNNING = 0;
    SUCCEEDED = 1;
    FAILED = 2;
  }

  message ResultStatus {
    // Status of a single search job

    // BLAST search job id
    string job_id = 1;

    // Status
    Status status = 2;
  }

  // Status of jobs from the search request
  repeated ResultStatus status = 1;
}

message ResultRequest {
  // Request for the result of a single BLAST search

  string job_id = 1;
}

message Organism {
  enum TaxGroupType {
    UNKNOWN = 0;
    BACTERIA = 1;
    VIRUS = 2;
    VIROID = 3;
    EUK = 4;
    ARCHAEA = 5;
  }

  enum RankType {
    NO_RANK = 0;
    SUPERKINGDOM = 1;
    KINGDOM = 2;
    SUBKINGDOM = 3;
    SUPERPHYLUM = 4;
    SUBPHYLUM = 5;
    PHYLUM = 6;
    SUPERCLASS = 7;
    CLASS = 8;
    SUBCLASS = 9;
    INFRACLASS = 10;
    SUPERORDER = 11;
    ORDER = 12;
    SUBORDER = 13;
    INFRAORDER = 14;
    PARVORDER = 15;
    SUPERFAMILY = 16;
    FAMILY = 17;
    SUBFAMILY = 18;
    GENUS = 19;
    SUBGENUS = 20;
    SPECIES_GROUP = 21;
    SPECIES_SUBGROUP = 22;
    SPECIES = 23;
    SUBSPECIES = 24;
    TRIBE = 25;
    SUBTRIBE = 26;
    FORMA = 27;
    VARIETAS = 28;
    COHORT = 29;
    SUBCOHORT = 30;
  }

  message Infraspecies {
    enum InfraspecificType {
      UNKNOWN = 0;
      BREED = 1;
      ISOLATE = 2;
      CULTIVAR = 3;
      STRAIN = 4;
    }
    InfraspecificType type = 1;
    string value = 2;
  }

  uint64 tax_id = 1;
  string sci_name = 2;
  string common_name = 3;
  Infraspecies infra_species = 4;
  TaxGroupType tax_group = 5;
  string host = 6;
  RankType rank = 7;
  string genomic_moltype = 8;
}

message SeqInfo {
  enum SeqType {
    UNKNOWN = 0;
    NUCLEOTIDE = 1;
    PROTEIN = 2;
  }

  string seq_id = 1;
  string accession = 2;
  string title = 3;
  uint64 tax_id = 4;
  SeqType type = 5;
  uint64 length = 6;
}

message Sequence {
  string seq_id = 1;

  // IUPAC sequence data
  string verbatim_seq = 2;

  // optional coordinates indicating subrange of sequence
  SeqCoord coords = 3;
}

message Alignment {
  // Define an alignment between the query and the subject,
  // including parameters and all alighed regions (segments).

  message Seg {
    // Define an aligned region (segment) between the query and subject

    // The length of the aligned region
    uint64 length = 1;

    // query sequence coordinates
    SeqCoord query_coords = 2;

    // subject sequence coordinates
    SeqCoord subject_coords = 3;
  }

  // Subject sequence
  string subject_seq_id = 1;

  // The raw score of an alignment, S, calculated as the sum of substitution
  // and gap scores.
  uint32 score = 2;

  // The Expectation value or Expect value represents the number
  // of different alignments with scores equivalent to or better
  // than S that is expected to occur in a database search by chance.
  // The lower the E value, the more significant the score and the alignment.
  double e_value = 3;

  // The bit score, S', is derived from the raw alignment score, S,
  // taking the statistical properties of the scoring system into account.
  // Because bit scores are normalized with respect to the scoring system,
  // they can be used to compare alignment scores from different searches.
  double bit_score = 4;

  // Number of identical matches
  uint64 num_identical = 5;

  // Percentage of identical matches
  double percent_identity = 6;

  // query sequence coordinates
  SeqCoord query_coords = 7;

  // subject sequence coordinates
  SeqCoord subject_coords = 8;

  // Alignment length
  uint64 alignment_length = 9;

  // Number of mismatches
  uint32 num_mismatches = 10;

  // Number of gap openings
  uint32 num_gap_opens = 11;

  // Total number of gaps
  uint32 num_gaps = 12;

  // Query coverage per subject
  // A negative value indicates that this type of coverage is not available.
  int32 percent_qry_cov_per_subject = 13;

  // Query coverage per unique subject
  // A negative value indicates that this type of coverage is not available.
  int32 percent_qry_cov_per_unique_subject = 14;

  // Query coverage per HSP
  // A negative value indicates that this type of coverage is not available.
  float percent_qry_cov_per_hsp = 15;

  // Aligned query sequence
  string aligned_query_seq = 16;

  // Aligned subject sequence
  string aligned_subject_seq = 17;

  // Aligned matches - string indicating matches/mismatches between aligned query and subject sequences
  string aligned_matches = 18;

  // CIGAR (Concise Idiosyncratic Gapped Alignment Report) notation
  string cigar = 20;

  // MD string (ie. SAM MD:Z field) reports Mismatches and Deletions
  string md = 21;

  // Pairwise dense-seg, query vs subject
  repeated Seg segments = 19;
}

message Resultset {
  // Query sequence
  string query_seq_id = 1;

  // All alignments for this search
  repeated Alignment alignments = 2;

  // sequence information
  map<string, SeqInfo> seq_info = 3; // map from seq-id string
  map<uint64, Organism> tax_info = 4; // map from tax-id

  // Optional set of warnings
  repeated string warnings = 5;
}

message ResultFailure {
    // The message returned when the job is failed

    // One or more errors
    repeated string errors = 1;
}

message ResultReply {
  // Reply for the Results RPC method

  oneof result {
    Resultset results = 1;
    ResultFailure failure = 2;
  }
}

message DBCatalog {
  // List of available BLAST databases

  message DbInfo {
    // Human readable name
    string name = 1;

    // The id that the client passes to the API
    string db_tag = 2;

    // Database description
    string description = 3;
  }

  // List of available BLAST databases
  repeated DbInfo db = 1;
}
